unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim

runtime macros/matchit.vim

colorscheme onedark

set autoindent
set autoread
set cursorline
set display+=lastline
set expandtab
set exrc
set formatoptions+=j
set hidden
set history=500
set hlsearch
set ignorecase
set langmap+=รถ`
set langremap
set laststatus=2
set mouse=
set nomodeline
set noshowmode
set nowrap
set number
set path=.,**
set scrolloff=8
set shellcmdflag=-ic
set shiftwidth=4
set smartcase
set smartindent
set smarttab
set splitbelow splitright
set tabpagemax=50
set tabstop=4 softtabstop=4
set termguicolors
set termwinsize=20x0
set timeoutlen=500
set updatetime=300
set wildignorecase
set wildmode=longest:list,full

"------------------------------------------------
" plugins
"------------------------------------------------

call plug#begin('~/.vim/plugged')

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align'
Plug 'easymotion/vim-easymotion'
Plug 'machakann/vim-highlightedyank'
Plug 'airblade/vim-gitgutter'
Plug 'rhysd/git-messenger.vim'
Plug 'itchyny/lightline.vim'
Plug 'tpope/vim-fugitive'
Plug 'itchyny/vim-gitbranch'
Plug 'itchyny/vim-gitbranch'
Plug 'SirVer/ultisnips'

call plug#end()

"------------------------------------------------
" Easy motion
"------------------------------------------------

let g:EasyMotion_do_mapping = 0 " Disable default mappings

" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-overwin-f2)

let g:EasyMotion_smartcase = 1

" jk motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

hi link EasyMotionTarget Statement
hi link EasyMotionShade Comment


"------------------------------------------------
" highlighted yank
"------------------------------------------------
let g:highlightedyank_highlight_duration = 400

"------------------------------------------------
" git messenger
"------------------------------------------------
let g:git_messenger_include_diff = 'current'
let g:git_messenger_close_on_cursor_moved = v:true

"------------------------------------------------
" lightline
"------------------------------------------------
"TODO: add git gutter and more: https://gitlab.com/polyzen/dotfiles/blob/dce37955a745ee23efd247306781f8bc4a4d62bc/base/.vim/vimrc#L158
let g:lightline = {
      \ 'colorscheme': 'one',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'absolutepath', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'gitbranch#name'
      \ }
      \ }

"------------------------------------------------
" Undo
"------------------------------------------------
if has('persistent_undo')
    " Save all undo files in a single location (less messy, more risky)...
    set undodir=$HOME/.vim_undo_files

    " Save a lot of back-history...
    set undolevels=5000

    " Actually switch on persistent undo
    set undofile

endif

"------------------------------------------------
" netrw
" -----------------------------------------------
let g:netrw_altfile        = 0
let g:netrw_altflag        = 0
let g:netrw_altv           = 0
let g:netrw_banner         = 0
let g:netrw_browse_split   = 0
let g:netrw_fastbrowse     = 1
let g:netrw_liststyle      = 3
let g:netrw_sort_by        = 'name'
let g:netrw_sort_by        = 'time'
let g:netrw_sort_direction = 'normal'
let g:netrw_sort_direction = 'reverse'

"------------------------------------------------
" auto commands
" -----------------------------------------------

augroup VimReload
autocmd!
    autocmd BufWritePost $MYVIMRC nested source $MYVIMRC
augroup END

augroup cobol_autocommands
  autocmd!
  autocmd BufRead,BufNewFile *.cpy,*.ddr,*.sel,*.fil,*.rec,*.iom set filetype=cobol
  autocmd FileType cobol setlocal makeprg=clear\ &&\ echo\ 'compiling...'\ &&\ iscc\ -c=resources/iscobol.properties
  autocmd FileType cobol setlocal errorformat=--%[A-Z]:\ #%n\ %m;\ file\ =\ %f\\,\ line\ =\ %l\\,\ col\ %c
  autocmd FileType cobol setlocal wildignore=*/run*/*,*/errs*/*
  autocmd FileType cobol setlocal suffixesadd=.cbl
augroup END

"------------------------------------------------
" abbrevations
"------------------------------------------------
ab perfrom perform
ab en-dif. end-if.
ab ife if  file-error<cr>perform last-will<cr><bs>end-if.

"------------------------------------------------
" functions
" -----------------------------------------------
"
function! ReplaceWordWithCursor()
    let old_word = expand('<cword>')
    let new_word = input('Enter replacement word: ')
    if new_word != ''
        execute '%s/\<' . old_word . '\>/' . new_word . '/gc'
    endif
endfunction

"------------------------------------------------
" keyboard mappings
"------------------------------------------------

imap jj <esc>

let mapleader = ","

" don't overrite yanks, sen c and d to blackhole
nnoremap d "_d
nnoremap c "_c

" v is always block mode
noremap v <c-v>

" strip trailing whitespace
nnoremap <F5> <cmd>%s/\s\+$//e<cr>
nnoremap <silent><leader><space> :noh<cr>
" yank until end of line
nnoremap Y y$
" switch to alternate buffer
nnoremap <leader><leader> <C-^>
" Write/update
nnoremap <silent><leader>s :up<cr>
inoremap <silent><leader>s <C-c>:up<cr>
nnoremap U <C-r>
nnoremap <leader>f /
vnoremap <leader>f /
nnoremap <leader>r :call ReplaceWordWithCursor()<CR>
nnoremap <leader>b ?
nnoremap <leader>h ^
nnoremap <leader>l $
nnoremap <leader>gg <cmd>GitGutterAll<cr>
nnoremap <leader>b <cmd>Buffers<cr>
nnoremap <leader>bl <cmd>BLines<cr>
nnoremap <silent><leader>m :up<CR>:make %<CR><CR>:cwindow<CR>
nnoremap <silent><leader>n <C-c>:bn<cr>
nnoremap <silent><leader>N <C-c>:bp<cr>
nnoremap <silent><leader>q <C-c>:q<cr>
if !exists('g:vscode')
  " Only set this mapping when not in VSCode
  nnoremap <C-p> <C-c>:Files<CR>
endif
nnoremap <silent><C-d> <C-c>:term<cr>
" add blank line above/below and stay in normal mode
nnoremap <silent> <leader>o o<ESC>
nnoremap <silent> <leader>O O<ESC>
" Preview file
nnoremap <leader>pf :vsp \| find <cfile> \| wincmd p<CR>
" Close preview window (to the right)
nnoremap <leader>cp :wincmd l \| close<CR>

" change or replace current word
nnoremap <leader>c /\<<C-r>=expand('<cword>')<CR>\>\C<CR>``cgn
nnoremap <leader>d /\<<C-r>=expand('<cword>')<CR>\>\C<CR>``dgn

nnoremap <c-j> :m .+1<CR>==
nnoremap <c-k> :m .-2<CR>==

inoremap <c-j> <Esc>:m .+1<CR>==gi
inoremap <c-k> <Esc>:m .-2<CR>==gi

inoremap ( ()<Esc>i

vnoremap <c-j> :m '>+1<CR>gv=gv
vnoremap <c-k> :m '<-2<CR>gv=gv

tnoremap <silent><C-j> <C-\><C-n>:resize -5\|normal i<CR>
tnoremap <silent><C-k> <C-\><C-n>:resize +5\|normal i<CR>

" keep selection when indenting in visual mode
xnoremap <  <gv
xnoremap >  >gv

" always n for search forward and N for backward
nnoremap <expr> n  'Nn'[v:searchforward]
xnoremap <expr> n  'Nn'[v:searchforward]
onoremap <expr> n  'Nn'[v:searchforward]
nnoremap <expr> N  'nN'[v:searchforward]
xnoremap <expr> N  'nN'[v:searchforward]
onoremap <expr> N  'nN'[v:searchforward]

cnoremap <expr> <c-n> wildmenumode() ? "\<c-n>" : "\<down>"
cnoremap <expr> <c-p> wildmenumode() ? "\<c-p>" : "\<up>"

" align text with space delim
vnoremap <silent><leader>a :EasyAlign*\<cr> 
nnoremap <silent><leader>a :'<,'>EasyAlign*\<cr> 
