unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim

runtime macros/matchit.vim

colorscheme onedark

set autoindent
set autoread
set cursorline
set display+=lastline
set expandtab
set exrc
set formatoptions+=j
set hidden
set history=500
set hlsearch
set ignorecase
set laststatus=2
set mouse=
set nowrap
set number
set path=.,**
set scrolloff=8
set shellcmdflag=-ic
set shiftwidth=4
set smartcase
set smartindent
set smarttab
set splitbelow splitright
set tabpagemax=50
set tabstop=4 softtabstop=4
set termwinsize=20x0
set langmap+=รถ`
set langremap
set wildignorecase
set wildmode=longest:list,full
set termguicolors

"------------------------------------------------
" plugins
"------------------------------------------------

call plug#begin('~/.vim/plugged')

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-dispatch'
Plug 'easymotion/vim-easymotion'

call plug#end()

"------------------------------------------------
" Easy motion
"------------------------------------------------

let g:EasyMotion_do_mapping = 0 " Disable default mappings

" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-overwin-f2)

let g:EasyMotion_smartcase = 1

" jk motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

hi link EasyMotionTarget Statement
hi link EasyMotionShade Comment

"------------------------------------------------
" auto commands
" -----------------------------------------------

augroup cobol_autocommands
  autocmd!
  autocmd BufRead,BufNewFile *.cpy,*.ddr,*.sel,*.fil,*.rec set filetype=cobol
  autocmd FileType cobol setlocal makeprg=iscc\ -c=resources/iscobol.properties
  autocmd FileType cobol setlocal errorformat=--%[A-Z]:\ #%n\ %m;\ file\ =\ %f\\,\ line\ =\ %l\\,\ col\ %c
  autocmd FileType cobol setlocal wildignore=*/run*/*,*/errs*/*
augroup END

"------------------------------------------------
" abbrevations
"------------------------------------------------
ab perfrom perform

"------------------------------------------------
" keyboard mapping
"------------------------------------------------

imap jj <esc>

let mapleader = ","

nnoremap <silent><leader><space> :noh<cr>
" Write/update
nnoremap <leader>s :up<cr>
inoremap <leader>s <C-c>:up<cr>
nnoremap <leader>f /
nnoremap <leader>b ?
nnoremap <leader>h ^
nnoremap <leader>l $
nnoremap <leader>a <C-6>
nnoremap <leader>b <cmd>Buffers<cr> 
nnoremap <leader>bl <cmd>BLines<cr> 
nnoremap <silent><leader>n <C-c>:bn<cr>
nnoremap <silent><leader>p <C-c>:bp<cr>
nnoremap <silent><leader>q <C-c>:q<cr>
nnoremap <C-p> <C-c>:Files<cr>
nnoremap <silent><C-d> <C-c>:term<cr>
" Put/paste the last yanked stuff
nnoremap <leader>p "0p
nnoremap <leader>P "0P
" Search for the word under the cursor using *
nnoremap <leader>c /\<<C-r>=expand('<cword>')<CR>\>\C<CR>``cgn

nnoremap <c-j> :m .+1<CR>==
nnoremap <c-k> :m .-2<CR>==
inoremap <c-j> <Esc>:m .+1<CR>==gi
inoremap <c-k> <Esc>:m .-2<CR>==gi
vnoremap <c-j> :m '>+1<CR>gv=gv
vnoremap <c-k> :m '<-2<CR>gv=gv

tnoremap <silent><C-j> <C-\><C-n>:resize -5\|normal i<CR>
tnoremap <silent><C-k> <C-\><C-n>:resize +5\|normal i<CR>

